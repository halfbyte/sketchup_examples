Sketchup

Google Sketchup ist ein sehr einfach zu verstehendes und zu bedienendes 3D-Konstruktionsprogramm. Neben der Verwendung für 3D-Modelle für Google Earth eignet es sich auch für andere Zwecke, z.B. für das Erstellen von Formen für das Drucken mit 3D-Druckern wie dem Makerbot. 

Sketchup lässt sich sehr einfach um eigene Funktionen erweitern. Hierzu existiert eine Anbindung an die Programmiersprache Ruby. Ruby ist eine interpretierte Sprache die in den letzten Jahren vor allem durch das Open-Source Webframework Ruby on Rails größere Bekanntheit erreichte. Ruby zeichnet sich vor allem dadurch aus, das es eine sehr dynamische Sprache ist, die sich sehr gut auf spezifische Anwendungsszenarien anpassen lässt - So entsteht schnell das, was man gerne DSL (Domain Specific Language) nennt und auf den ersten Blick nicht unbedingt etwas mit Ruby zu tun haben scheint.

Um Ruby-Skripte in Sketchup einzubinden müssen diese Sketchup bekannt gemacht werden. Hierzu müssen sie in einem speziellen Ordner abgelegt werden. Dieser ist von dem Betriebsystem abhängig. Wo die Skripte hinmüssen, sehen Sie in Tabelle 1

| Windows | C:/Program Files/Google/Google SketchUp 8/Plugins |
| Mac     | /Library/Application Support/Google SketchUp 8/SketchUp/Plugins |

Sketchup lädt beim Start alle Skripte, die in diesem Ordner (oder in Unterordnern davon) und die auf .rb enden, also Ruby-Dateien sind.

Allerdings ist es ein bisschen unpraktisch, immer in diesen System-Pfaden zu wandeln - Eine Alternative dazu finden Sie in dem Code-Repository, in welchem Sie auch sämtliche ausführlichen Code-Beispiele finden.

Um die Skripte dann in Sketchup benutzen zu können kann man eigene Menüpunkte in das Hauptmenü packen, aber auch das Kontextmenü sowie die Toolbars um eigene Punkte erweitern. Als letzte Möglichkeit, die insbesondere zum Testen der Funktionen hervorragend geeignet ist, kann man Skripte über die Ruby-Konsole testen. Diese kann man über das Fenster-Menü öffnen. In dieser Konsole lassen sich dann direkt Ruby-Kommandos eingeben. Ein kleines Beispiel gefällig? Dann geben Sie doch mal folgenden Text in die Textzeile der Konsole ein und drücken Enter:

UI.messagebox("IM IN UR SKETCHUP, SHOWIN YOU A MESSAGE")

Wir werden auf die Konsole noch öfter zurückkommen, denn dort lässt alles ausprobieren, was man dann später in echten Skripten verwenden möchte.

Genug der grauen Theorie - Wir wollen ja Welten erbauen. Jeder Sketchup-Neuling fängt vermutlich damit an, ein Rechteck und dann im folgenden Einen Würfel zu erstellen. Genau das werden wir jetzt auch in Ruby versuchen.

Als zusätzliches Werkzeug brauchen Sie eigentlich nur einen Texteditor, der mit Ruby-Code umgehen kann (und z.B. Syntax-Highlighting beherrscht), z.B. E oder JEdit für Windows und TextMate oder Smultron auf dem Mac.

Legen Sie jetzt eine Datei namens "rectangle.rb" in einem Verzeichnis Ihrer Wahl an. Für den Anfang kopieren Sie sich das Listing 1, quasi die Essenz einer Sketchup-Ruby-Datei

Listing 1: Ruby-Grundgerüst
-------------------
require 'sketchup'
def create_rectangle

end
-------------------

Für Ruby-Neulinge sei das Gerüst kurz Zeile für Zeile erklärt: require 'sketchup' lädt die Sketchup-Bibliothek, so dass das Skript auf die Sketchup-Objekte und Klassen zugreifen kann. def create_rectangle bis end ist eine (momentan noch etwas ärmliche) Methoden-Definition, die wir jetzt mit Leben füllen müssen.

Doch vorweg: Wie genau bekomen wir den Code jetzt in Sketchup ausgeführt? Nun, eine Möglichkeit wäre, das Skript in den oben genannten Ordner zu kopieren und Sketchup neu zu starten. Das ist, gerade während der Entwicklung, etwas mühsam und dauert vor allem zu lange. Einfacher ist es, das Skript über die Ruby-Konsole zu laden. Hierzu geben sie folgendes Kommando in die Konsole ein (Den Pfad sollten natürlich sie an den Absoluten Pfad Ihrer Datei anpassen)

load "/Users/jankrutisch/Documents/SketchupRuby/rectangle.rb"

Wenn das geklappt hat, sollte die Ausgabe der Konsole in etwa so aussehen:

> load "/Users/jankrutisch/Documents/SketchupRuby/rectangle.rb"
true

Gut. Passiert ist jetzt nicht besonders viel. Das liegt an zwei Dingen: Zum einen tut unser Code zur Zeit noch nichts. Zum anderen wird der Code von dem load-Befehl zwar geladen, was bei Ruby gleichbedeutend mit "ausgeführt" ist, aber der Code definiert eben nur eine Methode und führt sie nicht aus. Das können Sie zum testen aber auch am besten über die Konsole machen: Geben sie einfach den Befehl create_rectangle ein. Die Ausgabe sollte wie folgt aussehen:

> create_rectangle
nil

Das beweist, dass der Code geladen wurde und die Methode funktioniert, soweit man das von einer leeren Methode sagen kann. Interessant: In Ruby haben auch Methoden, die nichts explizit zurückgeben (z.B. durch ein return-Statement), einen impliziten Rückgabewert (nil ist in Ruby das, was in anderen Programmiersprachenn NULL oder null ist).

Aber: Wir wollten ja ein Rechteck zeichnen. den einfachsten Code dafür finden Sie in Listing 2:


---------------------
def create_rectangle
  model = Sketchup.active_model
  entities = model.entities
  pt1 = [0, 0, 0]
  pt2 = [9, 0, 0]
  pt3 = [9, 9, 0]
  pt4 = [0, 9, 0]
  new_face = entities.add_face pt1, pt2, pt3, pt4
end
---------------------
Hier gibt es jetzt ein bisschen mehr zu erklären. Sketchup ist die Basis-Klasse der Sketchup-API. Sie ist sozusagen der Einstiegspunkt. Die active_model-Methode gibt eine Referenz auf das aktuelle Sketchup-Dokument zurück - Mit der entities-Methode wiederum bekommt man eine Referenz auf eine Sammlung aller "Dinge" des Models. Wenn man neue 3D-Objekte erzeugen will, geschieht das in der Regel über die Entities-Sammlung (Collection). Um ein Rechteck zu erzeugen, brauchen wir die vier Eckpunkte des Rechtecks. Da wir uns in einem 3D-Raum befinden, müssen wir uns entscheiden, in welcher Ebene das Rechteck liegen soll. Der Einfachheit halber spannen wir das Rechteck mal zwischen der x- und der y-Achse auf, d.h. es liegt orthogonal zur z-Achse. Punkte lassen sich in der Ruby-API grundsätzlich entweder als Point3D-Objekte, oder aber als Arrays mit drei elementen ausdrücken, was lesbarer und einfacher ist. Nebenbei bemerkt: Wie man an diesem Beispiel erkennt, müssen Variablen in Ruby nicht deklariert werden, man kann sie einfach benutzen. Die add_face-Methode erstellt ein Face-Objekt und fügt es in die Entities-Sammlung ein. Ein Face-Objekt muss mindestens 3 Punkte haben (zwischen zwei Punkten kann man ja auch schließlich schwerlich eine Fläche aufspannen) und kann beliebig viele Punkte beinhalten, wobei diese alle in einer Ebene liegen müssen. In unserem Fall hat die Fläche (das Face) also vier Eckpunkte.

Eine kurze Anmerkung zu den Einheiten mit denen da gerechnet wird: Sketchup verwendet intern Zoll als Maß, d.h. unser Quadrat ist 9 Zoll breit (das sind 22,86 cm). Man kann Sketchup zwar auf eine andere Maßeinheit umstellen, die Ruby-API rechnet aber weiterhin auf Zoll-Basis.

Laden Sie die Datei noch einmal über die Ruby-Konsole in Sketchup (falls Sie Sketchup immer noch offen haben: Mit der Cursor-Hoch-Taste können sie frühere Eingaben wieder aufrufen) und führen Sie die methode aus. Das ergebnis sollte in etwa so aussehen wie im Bild 1. Glückwünsche an die Eltern, es ist ein Quadrat!

Aber eigentlich wollten wir ja ein Rechteck bauen. Und vielleicht wollen wir ja auch mal andere Ausmaße angeben. Dazu können wir die Methode jetzt parametrisieren. Das folgende Beispiel macht unsere Methode wesentlich flexibler:
--------------------------------
def create_rectangle(width, height)
  model = Sketchup.active_model
  entities = model.entities
  pt1 = [0, 0, 0]
  pt2 = [width, 0, 0]
  pt3 = [width, height, 0]
  pt4 = [0, height, 0]
  new_face = entities.add_face pt1, pt2, pt3, pt4
end
--------------------------------
Jetzt müssen Sie die Methode in der Sketchup-Konsole aber auch mit parametern aufrufen. Das könnte z.B. so aussehen:

create_rectangle(20,10)

Jetzt könnten wir uns eigentlich langsam in die dritte Dimension vorwagen. Dazu fügen wir eine neue Methode in unsere Datei ein, die aus dem Rechteck einen Quader macht, dieses mal gleich mit konfigurierbarer Höhe.

---------------------------------
def create_box(width, height, depth)
  face = create_rectangle(width, height)
  face.pushpull(depth)
end
---------------------------------

Die pushpull-Methode macht exakt das, was das Drücken/Ziehen-Werkzeug in Sketchup macht: Man kann 3D-Körper aus 2D-Flächen heraus ziehen. Wenn Sie die Methode in der Konsole ausprobieren, wird Ihnen auffallen, dass der Quader nach unten aus dem Koordinatensystem herauswächst. Das liegt an der Orientierung der Fläche, die nach dem Zeichnen "nach unten" zeigt. Es gibt zwei einfache Wege, um das zu beheben: Zum einen könnte man pushpull einfach eine negative Zahl übergeben (eben pull statt push), zum anderen könnte man die Fläche vorher umdrehen. Dazu können zwischen die beiden Zeilen einfach eine dritte Zeile "face.reverse!" hinzufügen.

Zugegeben, das war jetzt nicht sonderlich spannend - Würfel kann man ja auch recht einfach von Hand erzeugen. Wie wäre es mit etwas, das man nicht so leicht von Hand zeichnen kann - Einen Rahmen zum Beispiel. Dieses Element kann man ziemlich oft gebrauchen, z.B. wenn man Fenster konstruieren möchte.

Damit man mit Hilfe des pushpull-Kommandos so einen Rahmen aus einer Fläche "herausziehen kann", brauchen wir also eine Fläche mit einem Loch drin. Der Weg dorthin ist ein bisschen seltsam, aber immerhin gibt es unterwegs noch etwas zu lernen: Wenn man mit Sketchup im Editor modelliert, verwendet man relativ häufig den "gruppieren"-Menübefehl um Objekte zusammenzufassen. Genau das können wir in unserem Skript auch machen und so unser Flächenproblem lösen: Wir erzeugen zunächst eine neue Gruppe:

group = model.entities.add_group

Jetzt können wir Flächen direkt zu der Entities-Sammlung der Gruppe hinzufügen und so gleich zusammenfassen. Für einen gleichförmigen Rahmen könnte das z.B. so aussehen:

outer_face = group.entities.add_face([0,0,0], [10,0,0], [10,10,0], [0,10,0])
inner_face = group.entities.add_face([2,2,0], [8,2,0], [8,8,0], [2,8,0])

Wir haben jetzt also zwei Flächen, die in der selben Gruppe sind. Jetzt  kommt der Trick: Mit der folgenden Zeile können wir jetzt ein Loch in der größe der zweiten Fläche in die erste Fläche bohren:

inner_face.erase!

Jetzt können wir wie bei der Box mit pushpull daraus unseren Rahmen machen:

outerface.pushpull -2

Solche Helferlein sind schnell programmiert und erleichtern die Arbeit ungemein. Aber: Der Aufruf über die Konsole eignet sich vielleicht fürs Testen, eigentlich möchte man aber natürlich die Funktion über ein Menü aufrufen und dann bitte auch die Parameter bequem über ein Fenster mit Eingabefeldern eingeben. Es lohnt sich, mit dem zweiten anzufangen, weil wir die Funktion dann immer noch über die Konsole starten können, aber schon das Eingabefenster testen können.

Hierzu erzeugen wir eine zweite Methode, die Parameter über eine sog. Inputbox vom Benutzer erfragt und dann mit diesen unsere vorige Methode aufrufen.

Die inputbox-Methode erwartet drei bzw. vier parameter. Der erste Parameter ist ein Array von Labels für die Eingabefelder. Der zweite ist ein Array von Default-Werten für die Eingabefelder. Der dritte Parameter ist entweder ein Array mit Werten, die aus den Eingabefeldern ein Dropdown machen, oder aber ein Titel für die Inputbox. Der vierte ist für den Titel reserviert, wenn der dritte, naja, sie können sich das denken.

Die Methode könnte insgesamt so aussehen wie im Beispiel x:

def frame_with_inputbox
  prompts = ['Breite', 'Höhe', 'Dicke', 'Tiefe']
  values = [20, 20, 5, 5]
  result = UI.inputbox prompts, values, "Create Frame"
  frame(*result)
end

Die Methode verwendet einen kleinen Ruby-Trick: Da die inputbox-Methode als Rückgabewert einfach ein Array in der selben Reihenfolge wie die beiden ersten Parameter-Arrays zurückgibt und unsere frame-Methode die Parameter in genau dieser Reihenfolge haben möchte, können wir den sog. Splat-Operator (den Asterisk) verwenden, um das Array auf die Parameter aufzuteilen. Eine etwas lesbarere Version finden Sie in Beispiel y:

width, height, thickness, depth = result
frame(width, height, thickness, depth)

Jetzt fehlt nur noch ein Menüeintrag. Den kann man sehr einfach über die UI.menu-Methode erzeugen, wie das Beispiel x zeigt:

UI.menu("Plug-Ins").add_item("Draw Frame") do 
  frame_with_inputbox
end

Leider hat die Sache beim Entwickeln einen Haken: Jedes Mal, wenn man die Datei neu lädt, wird auch der Menüpunkt neu angelegt, so dass das Menü am Ende eine ellenlange Liste von "Draw Frame"-Einträgen ist. Es gibt leider auch keine Funktion um Menüeinträge zu löschen. Aber keine Sorge: Ein Neustart von Sketchup behebt das Problem. Ausserdem gibt es einen Trick, der ein bisschen an die #ifdef-Konstrukte aus C-Programmen erinnert, der das Problem zumindest Teilweise behebt: Man kann mit Hilfe von Sketchup verwalten, ob eine Datei bereits einmal geladen wurde und den Menüeintrag so nur beim erstem Mal hinzufügen. Achtung: Ändert sich der Code für die Menüeintragung, hilft wiederum nur der Sketchup-Neustart.

unless file_loaded? File.basename(__FILE__) 
  UI.menu("Plug-Ins").add_item("Draw Frame") do 
    frame_with_inputbox
  end
end

file_loaded File.basename(__FILE__) 

Die Methode zum Erzeugen von Frames liesse sich natürlich noch beliebig ausbauen - Momentan erzeugen wir das Objekt immer am Nullpunkt des Koordinatensystems, was ein bisschen unpraktisch ist. Ausserdem wäre es vielleicht interessant, den Rahmen auch in verschiedenen Ebenen zu zeichnen statt immer nur zwischen x- und y-Achse aufgespannt. Eine Version der Methode, die das alles kann, finden Sie in dem Code-Repository des Autors.

Neben der Erzeugung von neuen Objekten kann es natürlich auch ganz spannend sein, bestehende Objekte zu nehmen und zu modifizieren. Als erste Spielerei gilt es, ein beliebiges Objekt entlang einer beliebigen Achse in frei wählbarem Abstand zu duplizieren.

Mit der entstehenden Methode lässt sich ein beliebiges selektiertes Objekt vervielfältigen. Um die bearbeitung zu vereinfachen, gruppieren wir zunächst einmal die selektierten Objekte.

Das ist im prinzip ein einzeiler:

model.entities.add_group(model.selection)

Die Luxus-Version, die im Code-Repository zu finden ist, kapselt ein paar Sonderfälle in einer Methode, die sich group_from_selection nennt. So checkt die Methode z.B. ob es sich bei dem selektierten Objekt vielleicht schon um eine Gruppe handelt.

Um jetzt das Objekt zu duplizieren können wir einfach auf der Gruppe die copy-Methode aufrufen. Danach müssen wir das Objekt dann nur noch verschieben. Hierzu eignet sich die transform!-Methode, die sich auf der Gruppe aufrufen lässt. Die transform!-Methode braucht ein Transformation-Objekt. Die Transformation-Klasse stellt diverse Konstruktoren für Transformationen wie Skalierungen, Rotationen und Translationen zur Verfügung. Da es sich bei uns um eine einfache Translation handelt, können wir eine solche Transformation (z.B. für eine Verschiebung entlang der X-Achse) einfach erzeugen:

transformation = Geom::Transformation.translation([10,0,0])

Damit wir die Transformation entlang einer beliebig wählbaren Achse vornehmen können, wird unsere Methode einen Achsen-Parameter bekommen, der dann die Berechnung der Translation bestimmt. Zusätzlich kann man die Richtung noch als 1 oder -1 übergeben. Die Berechnung der Translation sehen Sie in Beispiel 1

trans = case(axis)
when :x
  [distance * i * direction, 0, 0]
when :y
  [0, distance * i * direction, 0]
when :z
  [0, 0, distance * i * direction]
end

Mit dem entstehenden Array können wir jetzt eine Translation erzeugen und die Kopie unserer Gruppe transformieren:

transformation = Geom::Transformation.translation(trans)
copy.transform!(transformation)

Für diese Funktion wäre natürlich ein Eintrag in das Kontext-Menü sehr sinnvoll. Die Einbindung in das Kontextmenü funktioniert etwas anders, da man in der Einbindung noch Vorbedingungen prüfen kann. In unserem Beispiel testen wir einfach mal, ob überhaupt etwas ausgewählt ist. Auch hier gilt wieder: Ohne das file_loaded? würden wir mit jedem neuladen der Datei einen neuen Kontextmenü-Eintrag erzeugen.


unless file_loaded? File.basename(__FILE__) 
  UI.add_context_menu_handler do |menu|
    if model.selection.length > 0
      menu.add_separator
      menu.add_item("Copy and Translate") { copy_with_dialog }
    end
  end
end

file_loaded File.basename(__FILE__)
Damit kann man schon sehr viele schöne Dinge anstellen. Aber wie wäre es, Gegenstände zu rotieren, während man sie verschiebt. Mit dieser Technik sind viele interessante Körper möglich.

Um eine Rotation durchzuführen, gibt es natürlich auch einen Konstruktor auf der Geom::Transformation-Klasse. Oberflächlich sieht der ganz einfach aus.

transformation = Geom::Transformation.rotation(point, axis_vector, angle)

Allerdings ist das dann im Detail doch noch interessant. axis_vector und angle geben die Achse, um die Rotiert werden soll, sowie den Winkel an. In unserem Fall halten wir den axis_vector erst einmal einfach und rotieren nur um eine der Grundachsen. Dadurch ist der axis_vector entweder [1,0,0], [0,1,0] oder [0,0,1]. Der Winkel muss im Bogenmaß angegeben werden, d.h. 360° ensprechen 2π. Das erste Argument der Methode ist nun besonders interessant: Mit ihm kann man den Punkt angeben, um den die Rotation erfolgen soll. In dem kompletten Beispiel im Repository nutzen wir dies um durch einen Offset Dinge wie Rotationsmotoren oder Turbinen erzeugen zu können (Siehe Bild 4). Die Berechnung muss mit berücksichtigen, dass die Ursprungskoordinate nicht die Mitte der Gruppe ist, die wir erzeugen. Der Kern der Operation sieht dann so aus wie in Beispiel x zu sehen:

(num).times do |i|
  copy = group.copy
  copy.transform! Geom::Transformation.rotation(point, axis_vector, step * i)
  copies << copy
end

Der Winkel pro rotation (hier als "step" bezeichnet) berechnet sich daraus, in wie viele Teile die Rotation unterteilt werden soll, also hier 2 * π / num.

Haben Sie eigentlich schon einmal versucht, nach einer solchen Mehrfach-Kopier-Aktion die Funktion "Rückgängig" aus dem Menü aufzurufen? So können Sie ihre Programme quasi rückwärts debuggen. Wenn Sie allerdings eine fertige Funktion rückgängig machen wollen und gerade ein Objekt 200 mal vervielfältigt haben, macht das dann doch keinen Spaß mehr. Lieber würde man die komplette Vervielfältigung in einem Schritt rückgängig machen wollen. hierzu gibt es eine sehr schöne Methode: Sie können alle Operationen, die sie in einem Schritt zusammenfassen wollen mit einem Methoden-Paar umschließen, wie in Beispiel 5 zu sehen

model.start_operation "Name"
# [...]
model.commit_operation

Wie sie sehen können Sie der Operation sogar noch einen Namen mitgeben, unter der diese dann im "Rückgängig machen"-Menüpunkt auftaucht. 

Einen Nachteil hat unser momentanes Vorgehen noch: Wir "verpesten" gerade den Namensraum der Sketchup-API mit unseren Methoden. Ruby ist eine Objektorientierte Sprache mit Klassen und Klassenhierachien, das muss doch besser gehen. 

Ein gängiges Vorgehen ist, die eigentlichen Methoden in einer Klasse, die in einem Modul liegt zu verbergen. Doch der Reihe nach. Module werden in Ruby für zwei Dinge verwendet: Zum einen ermöglichen sie, mehrere Klassen in eine Art Namensraum zu bündeln, vielleicht vergleichbar den Packages in Java. Zum anderen ersetzen sie aber auch die in Ruby nicht vorhandenene Ableitung von mehreren Oberklassen - Man kann Module in Klassen "hineinmixen", wodurch alle Methoden des Moduls auch in der Klasse vorhanden sind. Beide Varianten werden wir im folgenden kennenlernen.

Zunächst kapseln wir erst einmal alles in einem Modul, in unserem Namensraum. Ich wähle hier, um die Zeilenlänge der Beispiele nicht zu gefährden, einen kurzen Namen. Es können auch JansSketchupTools heissen.

Kommen wir für unser Beispiel noch einmal zu der Konstruktion von Körpern aus dem Nichts. Sketchup bietet ja erstaunlich wenig Grundkörper. So gibt es z.B. keinen einfachen Weg, eine Kugel zu erzeugen. Das soll das Ziel unseres nächsten Tools sein.

Wir verpacken die Erstellung der Kugel also in eine Klasse. Diese kommt in das Modul. Das (nicht funktionsfähige) Grundgerüst unserer Klasse inklusive des Menüeintrags sieht dann so aus:

module JK
  class Sphere
    def self.dialog
      # [...]
    end 
  end
end

unless file_loaded? File.basename(__FILE__) 
  UI.menu("Plug-Ins").add_item("Kugel") do 
    JK::Sphere.dialog
  end
end
file_loaded File.basename(__FILE__) 

Die Klasse "Sphere", die unsere Kugel repräsentieren soll, hat also eine Klassenmethode, die den schon bekannten Dialog aufrufen soll. Danach wird die Methode sinnvollerweise einen Konstruktor aufrufen, der die Kugel erzeugt.

In Ruby heissen die Konstruktoren von Klasse "initialize". Als Parameter erwarten wir einen Radius und eine Anzahl von Segmenten, in die wir die Kugel unterteilen wollen (Je mehr Segmente, desto runder wird die Kugel).

def initialize(radius, segments)
  @group = model.entities.add_group
  @radius = radius
  @segments = segments
  points = points_for_sphere
  add_faces(points)
end

Wir speichern den Radius sowie die Anzahl der Segmente erst einmal in einer sogenannten Instanzvariable ab, die in Ruby an dem @-Zeichen erkennbar ist. Diese Variablen haben in der gesamten Objektinstanz gültigkeit. Dies hat zur Folge, dass wir in den folgenden Methodenaufrufen diese Parameter nicht mehr mitschleifen müssen.

Es gibt viele Wege, eine Kugel zu konstruieren. Die am leichtesten verständlichste ist vermutlich die, sich an den Breiten- und Längengraden eines Globus zu orientieren. Hierzu erzeugen wir Punkte, die jeweils die Schnittpunkte zwischen den Breiten- und Längengraden abbilden und ziehen zwischen diesen Punkten dann Flächen auf. Die Position im 3D-Raum eines Punktes (sofern er nicht ein Pol ist) lässt sich dann relativ einfach berechnen (davon ausgehend, das der Mittelpunkt der Kugel der Nullpunkt unseres Koordinatensystems ist):

# col, row = zähler von 0..segmentanzahl
# step = größe eines segments in bogenmaß
[
  @radius * Math.cos(step * col) * Math.sin(step * row), 
  @radius * Math.sin(step * col) * Math.sin(step * row), 
  @radius * Math.cos(step * row)
]

Da sich Sketchup beim Erzeugen von Flächen bitterlich beklagt, wenn man einen Punkt zweimal angibt, müssen wir für die beiden Pole der Kugel eine Sonderlösung bauen: Wir erzeugen unsere Punkte nur ab der zweiten Reihe und nur bis zur vorletzten. Die Methode, die die Flächen erzeugt, besteht deswegen aus drei Teilen: Zunächst wird die erste Reihe von Punkten mit dem oberen Pol verbunden, dann werden die mittleren Flächen erzeugt und zuletzt werden die Flächen zwischen der untersten Reihe und dem "Südpol" erzeugt.

Wichtig: Widerstehen Sie dem Drang, den Kompletten Code für die Erzeugung der Kugel in der initialize-Methode unter zu bringen. Da Sie jetzt eine gekapselte Klasse gebaut haben, spricht nichts dagegen, sehr kleine Methoden zu bauen. Das komplette Beispiel im Repository versucht diese "Best practice" aus der Objektorientieren Entwicklung möglichst konsequent umzusetzen.

Eine Sache nervt allerdings jetzt dann doch ein bisschen: Objekte immer im Nullpunkt des Koordinatensystems zu erzeugen funktioniert zum Testen ja ganz gut, wenn man aber gerade an einer komplexen Szenerie arbeitet, ist das vielleicht nicht mehr so angebracht. Aber: Das geht besser. Dafür gibt es in Sketchup die Komponenten. Um unsere Sphere-Klasse dazu zu bringen, anstelle einer Gruppe eine Komponente zu erzeugen, ist gar nicht so viel mehr Code nötig.

Im Konstruktor der Klasse erzeugen wir statt einer Gruppe eine Komponentendefinition. Den Code dafür finden Sie in Beispiel x. 

@definition = Sketchup.active_model.definitions.add "Sphere"
@definition.insertion_point = Geom::Point3d.new(0, 0, -@radius)

Eine solche Definition hat, genau wie eine Gruppe, auch ein Entities-Array, so dass sich die Erzeugung der Kugel nicht sehr unterscheidet. Ist die Komponenten-Definition komplett, können wir über Sketchup.active_model.place_component eine Instanz der Komponente erzeugen, die der Benutzer jetzt frei im Raum positionieren kann. Zusätzlich dazu haben einmal platzierte Komponenten zusätzliche "Anfasser" mit dessen Hilfe sie sich auch nachträglich verschieben und verdrehen lassen.

Eine Kugel ist ja zugegebenermaßen ein relativ triviales Beispiel. Interessanter, gerade für technische Konstruktionen sind komplexere Formen, wie z.B. Schrauben bzw. Gewinde. Die Konstruktion eines Gewindes ist im allgemeinen gar nicht so schwierig: Man berechnet einfach drei Spiralen rund um einen zylinder und zeichnet dann die Flächen zwischen diesen Spiralen. Will man allerdings alle Bedingungen eines technischen Gewindes erfüllen, wird es schon interessanter: Um ein Gewinde am Ende einer Schraube vernünftig abzuschließen müssen wir diesen Sonderfall bei der Berechnung der Spiralen extra betrachen. Ausserdem gelten für technische Gewinde besondere Maße, was die Flankenwinkel etc. angeht. Insgesamt hat ein beliebiges Gewinde sehr viele Parameter, die sich teilweise gegenseitig bedingen (So kann bei einem bestimmten Flankenwinkel die Differenz zwischen Aussen- und Innenradius nicht beliebig groß sein), so dass wir hier vermutlich mit einem einfachen Dialog nicht weiter kommen. Für diese Fälle sieht Sketchup die sogenannten Web-Dialoge vor. Dies sind Dialog-Fenster, die es einem ermöglichen, mit Web-Technologien (HTML / CSS / Javascript) komplexe Dialoge zu bauen um dem Benutzer das erstellen einer Komponente so bequem wie möglich zu machen. Dies kann dann sogar soweit gehen, dass man mit Hilfe von Javascript und z.B. einem Canvas einstellungen mit einer dynamischen Zeichnung visualisiert.

Sketchup sieht hierbei eine enge Verzahnung zwischen Javascript, das in einem solchen Webdialog läuft, und der Ruby-API vor.

Der Web-Dialog läuft unter Windows in einem eingebetteten Internet Explorer und unter OS X in einem eingebetteten Safari. Dies gilt es bei der Auswahl der zu verwendenden Technologien zu berücksichtigen und plant man eine Sketchup-Erweiterung zu veröffentlichen, kann es nicht schaden, diese auf beiden Plattformen zu testen. Da sowohl auf dem Mac als auch unter Windows die jeweils installierten Browserversionen verwendet werden, muss man allerdings selber entscheiden, wie viel Arbeit man sich mit der Unterstützung von sehr alten Plattformen wie IE6 oder Safari 2 machen will.

Ein Webdialog kann mit unseren Sketchup-Skripten kommunizieren - Man kann sowohl aus Ruby heraus Javascript-Funktionen des Webdialogs aufrufen, als auch umgekehrt Callbacks in Ruby aufrufen. Dies funktioniert über URLs, wie wir gleich sehen werden.

Ein einfacher, Hallo-Welt-Webdialog ist in Beispiel X zu sehen.

web_dialog = UI::WebDialog.new("Schraubgewinde", false, 'screw-thread-dialog')
web_dialog.set_html("<html><body><h1>Hallo Welt</h1></body></html>")
web_dialog.show

Neben der Möglichkeit, HTML im Ruby-Code abzulegen, was bei kleineren Dialogen sicher noch möglich ist, kann man auch mit set_file eine lokale HTML-Datei in den Dialog laden. Wie man eine Datei aus einem html-Unterverzeichnis in den Dialog lädt, zeigt Beispiel X

dialog.set_file(File.join(File.dirname(__FILE__), 'html', 'index.html'))

Um eine Eingabe-Maske für unser Gewinde zu erstellen, verwenden wir ein HTML-Formular. Eine gute Übersicht über HTML-Formulare und wie man sie erstellt finden Sie unter [selfhtml].

Das wichtigste ist das umschließende <form>-Tag, dort können wir festlegen, wohin das Formular abgesendet werden soll. In unserem Fall verwenden wir als action-URL eine spezielle Sketchup-URL, wie in Beispiel X zu sehen ist.

<form id="screw_thread" action="skp:screw_thread_create@" method="get">
  <input type="text" name="inner_radius" id="inner_radius" />
</form>

Doch was passiert jetzt, wenn wir das Formular absenden? Es wird versucht, ein Ruby-Callback aufzurufen, den wir natürlich erst erstellen müssen. Ein Codegerüst dafür ist in Beispiel X zu sehen:

dialog.add_action_callback("screw_thread_create") do |dialog, params|
  # hier irgendwas machen
end

Innerhalb des Blocks ist jetzt ein Verweis auf den Webdialog (dialog) und ein String mit allen Daten aus dem Formular (params) verfügbar. Man könnte die Daten jetzt aus dem String herausparsen, aber das geht auch einfacher, denn wir können mit einer Methode des dialog-Objekts auf die Formularfelder direkt zugreifen, wie in Beispiel X zu sehen. Da ein HTML-Formular-Textfeld Strings enthält, müssen wir den Rückgabewert mit Hilfe der to_f-Methode (die in Ruby auf jedem String verfügbar ist) in eine Fließkommazahl wandeln.

inner_radius = dialog.get_element_value("inner_radius").to_f

Um das Formular mit zusätzlicher Funktionalität zu versehen, steht wie gesagt Javascript zur Verfügung. Um die Entwicklung zu vereinfachen, verwenden wir im folgenden eine Javascript-Bibliothek namens jQuery, die viele Standard-Aufgaben einfacher macht und vor allem die diversen Unterschiede zwischen Safari und IE geschickt wegkapselt.

In userem Fall sollten wir z.B. vor dem Abschicken des Formulars überprüfen, ob die Werte, die der Benutzer eingegeben hat, überhaupt sinnvoll sind. Bild X zeigt die übliche Bemaßung eines Gewindes. Passt jetzt z.B. der Öffnungswinkel des Gewindes nicht zu der Dicke des Gewindes (die sich durch Aussenradius - Innenradius berechnet), würde unser Code sehr seltsam aussehende Gewinde erzeugen. Auch sollte die Länge des Benötigten Gewindes möglichst so groß sein wie die Steigung des Gewindes, denn eine halbe Gewindeumdrehung macht in der Regel keinen Sinn. Im Beispiel X ist gezeigt, wie eine solche Validierung aussehen könnte. Mit Hilfe von jQuery wird dabei ein sog. Eventhandler an den Submit-Event des Formulars gehängt, d.h. wenn der Benutzer versucht, das Formular abzuschicken, wird zunächst unser Eventhandler aufgerufen. Gibt dieser "false" zurück, wird das Formular gar nicht erst abgesendet.

$(function() {
  $('#screw_thread').submit(function(e) {
    var inner_radius = parseFloat($('#inner_radius').val());
    var outer_radius = parseFloat($('#outer_radius').val());
    var thickness = outer_radius - inner_radius;
    var minimumLead = Math.tan(angle/2) * thickness;
    if (minimumLead > (lead / 2)) {
      alert("Die Werte ergeben kein wohlgeformtes Gewinde!");
      return false;
    }
    return true;
  });
});

Die Äussere funktion sorgt übrigens nur dafür, dass der Eventhandler erst installiert wird, wenn das Dokument des Webdialogs komplett von dem integrierten Browser geladen ist - Ansonsten kann es sein, dass jQuery das Formular noch gar nicht findet. Eine solche Kapselung in die $()-Funktion ist also immer sinnvoll, wenn man Eventhandler installieren möchte.

Natürlich gäbe es noch viel mehr zu überprüfen - z.B. ob überhaupt sinnvolle Werte (also Zahlen) in den Feldern stehen. Eine komplette, schon sehr ausgefeilte Validierung finden Sie in dem Codebeispiel im Repository.

Wo gibt es Hilfe?

Zunächst gibt es natürlich die offizielle Dokumentation der Ruby-API, die Sie unter [http://code.google.com/intl/de-DE/apis/sketchup/docs/index.html] finden. Ein ziemlich ausführliches (englischsprachiges) Sketchup-Tutorial, welches einen großen Teil zu der Ruby-API enthält, findet sich unter [http://www.martinrinehart.com/models/tutorial/tutorial_toc.html]. Falls immer noch Fragen offen sind, hilft Ihnen vielleicht jemand in der Google-Gruppe zu dem Thema [http://groups.google.com/group/google-sketchup-developers]. Eine Website, die sich neben allgemeinen Sketchup-Tutorials auch mit Ruby-Plugins befasst ist [http://sketchucation.com].

Fazit

Die Ruby-API von Google Sketchup ist sehr mächtig. Dieser Artikel kann dies nur ansatzweise demonstrieren - macht aber hoffentlich Lust auf mehr. Oft dürfte das schreiben eines kleinen Sketchup-Plugins deutlich schneller gehen als das händische Modellieren in Sketchup - Insbesondere dann, wenn es auch auf Präzision ankommt. Mit Hilfe der Webdialoge kann man gerade die Erstellung von komplexen Formen gut veranschaulichen und Fehleingaben vermeiden.
